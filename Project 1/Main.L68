00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 15/02/2023 16:08:16

00000000                             1  *-------------------------------------------------------------------------------------------------------------------*
00000000                             2  * Title      : My Graphical design project                                                                          *
00000000                             3  * Written by : Steve Fasoranti                                                                                      *
00000000                             4  * Date       : 26/01/2023                                                                                           *
00000000                             5  * Description: A built in graphical endless runner game thats called DASH dash as far as you can dogding obsticles  *
00000000                             6  *-------------------------------------------------------------------------------------------------------------------*
00000000                             7  
00001000                             8              ORG $1000
00001000                             9  
00001000                            10  START:
00001000                            11  
00001000  =00000020                 12  SPACE_KEY               equ $20
00001000  =000000A0                 13  RunnerSprite            equ 160
00001000  =00000026                 14  UP_KEY                  equ $26
00001000  =00000028                 15  DOWN_KEY                equ $28
00001000  =00000025                 16  LEFT_KEY                equ $25
00001000  =00000027                 17  RIGHT_KEY               equ $27
00001000  =0000009C                 18  Gravity                 equ $9C 
00001000  =00000013                 19  GET_USER_INPUT_COMMAND  equ 19
00001000  =000000A0                 20  RunnerStartSpriteX      equ 160
00001000  =00000004                 21  FRAC_BITS               equ 4
00001000                            22  
00001000                            23  *---------------------------------------------------------------------------------------------------------------*
00001000                            24  *---------------------------------------------------------------------------------------------------------------*
00001000                            25  *---------------------------------------------------------------------------------------------------------------*
00001000                            26  *-------Changes screen size to the desires size of the screen so #700 is the width and the 600 is the length----*
00001000                            27  *---------------------------------------------------------------------------------------------------------------*
00001000                            28  *---------------------------------------------------------------------------------------------------------------*
00001000                            29  *---------------------------------------------------------------------------------------------------------------*
00001000                            30  
00001000                            31  
00001000  103C 0021                 32          move.b  #(ScreenChangeCode) , d0
00001004  223C 02BC0258             33          move.l  #700*$10000+600, d1
0000100A  4E4F                      34          trap    #15
0000100C                            35          
0000100C                            36  *--------------------------------------------------*
0000100C                            37  *--------------------------------------------------*
0000100C                            38  *-------Loades the loading screen------------------*
0000100C                            39  *--------------------------------------------------*
0000100C                            40  *--------------------------------------------------*
0000100C                            41  
0000100C                            42  
0000100C  41F9 000012B4             43          LEA     LoadingScreen, A0     ;Load up the loading screen from the bmp file onto the terminal
00001012  123C 00A0                 44          MOVE.B  #160, d1              ;Moves the value 160 into D1
00001016  143C 00AA                 45          MOVE.B  #170, d2              ;Moves the value 170 into D2
0000101A  263C 0000010E             46          MOVE.l  #270, d3              ;Moves the value 270 into D3
00001020  183C 00FA                 47          MOVE.B  #250, d4              ;Moves the value 250 into D4
00001024  1A3C 0000                 48          MOVE.B  #0, d5                ;Moves the value 0 into D5
00001028  1C3C 0000                 49          MOVE.B  #0, d6                ;Moves the value 0 into D6
0000102C  4EB9 0029BDA0             50          jsr     DRAWIMAGE           ;Uses jsr to draw the image (DRAW IMAGE is a variable used in drawimages.x68 which draws the image in the terminal also using LEA)
00001032                            51          
00001032                            52          
00001032                            53      
00001032                            54  *---------------------------------------------------------* 
00001032                            55  *---------------------------------------------------------*
00001032                            56  *------Double buffering occurs after the loading screen---*   
00001032                            57  *---------------------------------------------------------*
00001032                            58  *---------------------------------------------------------*
00001032                            59      
00001032  103C 005C                 60          move.b  #92, d0               ;Moves the value 92 to D0
00001036  123C 0011                 61          move.b  #17, d1               ;Moves the value 17 into D1
0000103A  4E4F                      62          trap    #15                   ;enables the buffering after the loading screen
0000103C                            63          
0000103C                            64          
0000103C                            65  *------------------------------------------------------------------------* 
0000103C                            66  *------------------------------------------------------------------------*
0000103C                            67  *------Resets the variables for the runner so they dont break the game---*   
0000103C                            68  *------------------------------------------------------------------------*
0000103C                            69  *------------------------------------------------------------------------*
0000103C                            70   
0000103C                            71  ResetBattleVariables
0000103C                            72  
0000103C                            73          *Reset all of the variables for the runner
0000103C  23FC 0000000A 00001278    74          move.l  #10,  RunnerX
00001046  23FC 00000226 0000127C    75          move.l  #550, RunnerY
00001050  23FC 000000A0 00001280    76          move.l  #160, RunnerChunkX
0000105A  23FC 00000000 00001284    77          move.l  #0,   RunnerChunkY
00001064  23FC 0000000A 00001288    78          move.l  #10,  RunnerSpeed
0000106E  23FC 00000000 0000128C    79          move.l  #0,   RunnerJumping
00001078                            80  
00001078  23FC 00000000 00001294    81          move.l  #0,   RunnerLeft
00001082                            82          
00001082                            83         
00001082                            84  *-----------------------------------------------------------------------------------------------------*        
00001082                            85  *-----------------------------------------------------------------------------------------------------*
00001082                            86  *-----After buffering of the loading screen it loads the title image and uses DRAWIMAGE to draw it----*
00001082                            87  *-----------------------------------------------------------------------------------------------------*
00001082                            88  *-----------------------------------------------------------------------------------------------------*
00001082                            89  
00001082                            90      
00001082  41F9 000151FE             91          LEA     TitleScreen, a0        ;Loads up the Title screen after the buffering from the bmp image file
00001088  223C 000002BC             92          move.l  #700, d1               ;moves the value long 700 (Screen size) into d1
0000108E  243C 00000258             93          move.l  #600, d2               ;moves the value long 700 (Screen size) into d2
00001094  7600                      94          move.l  #0, d3                 ;moves the value long 0 into d3
00001096  7800                      95          move.l  #0, d4                 ;moves the value long 0 into d4
00001098  7A00                      96          move.l  #0, d5                 ;moves the value long 0 into d5
0000109A  7C00                      97          move.l  #0, d6                 ;moves the value long 0 into d6
0000109C  4EB9 0029BDA0             98          jsr     DRAWIMAGE             ;Uses jsr to draw the image (DRAW IMAGE is a variable used in drawimages.x68 which draws the image in the terminal also using LEA)
000010A2                            99  
000010A2                           100  
000010A2                           101  *-------------------------------------------------------------------------------------------------------*        
000010A2                           102  *-------------------------------------------------------------------------------------------------------*        
000010A2                           103  *--------Displays the new draw in d0 and replaces what was in d0 (the loading screen in the above code)-*
000010A2                           104  *-------------------------------------------------------------------------------------------------------*
000010A2                           105  *-------------------------------------------------------------------------------------------------------*     
000010A2                           106  
000010A2  103C 005E                107          move.b  #94, d0                ;moves the value 94 into D0
000010A6  4E4F                     108          trap    #15                    ;displays the new draw in 
000010A8                           109          
000010A8                           110     
000010A8                           111  *----------------------------------------------------------------------*
000010A8                           112  *--------Draws the background of the Gameplaybackground----------------*
000010A8                           113  *----------------------------------------------------------------------*
000010A8                           114  
000010A8  41F9 00148C68            115          LEA     Frame1, a0
000010AE  223C 000002BC            116          move.l  #700, d1
000010B4  243C 00000226            117          move.l  #550, d2
000010BA  7600                     118          move.l  #0, d3
000010BC  7832                     119          move.l  #50, d4
000010BE  7A00                     120          move.l  #0, d5
000010C0  7C32                     121          move.l  #50, d6
000010C2  4EB9 0029BDA0            122          jsr     DRAWIMAGE
000010C8                           123          
000010C8                           124  *----------------------------------------------------------------------*
000010C8                           125  *----------------------------------------------------------------------*
000010C8                           126  *----store player velocity as a shifted number for calculation---------*
000010C8                           127  *----------------------------------------------------------------------*
000010C8                           128  *----------------------------------------------------------------------*
000010C8  2039 000012A8            129          move.l  RunnerVelocity, d0
000010CE  E948                     130          lsl     #FRAC_BITS, d0
000010D0  23C0 000012A8            131          move.l  d0, RunnerVelocity
000010D6                           132          
000010D6                           133          
000010D6                           134          
000010D6                           135  *----------------------------------------------------------------------*
000010D6                           136  *----------------------------------------------------------------------*
000010D6                           137  *------Store Player positions shifted as well for the Y coordinate.----*
000010D6                           138  *----------------------------------------------------------------------*
000010D6                           139  *----------------------------------------------------------------------*
000010D6  2039 0000127C            140          move.l  RunnerY, d0
000010DC  E948                     141          lsl     #FRAC_BITS, d0
000010DE  23C0 0000127C            142          move.l  d0, RunnerY        
000010E4                           143          
000010E4                           144  *----------------------------------------------------------------------*
000010E4                           145  *----------------------------------------------------------------------*        
000010E4                           146  *-------------------Set drawing pen to black for score bar-------------*
000010E4                           147  *----------------------------------------------------------------------*
000010E4                           148  *----------------------------------------------------------------------*
000010E4  7050                     149          move.l      #80, d0
000010E6  7200                     150          move.l      #$00000000, d1
000010E8  4E4F                     151          trap        #15
000010EA  7051                     152          move.l      #81, d0
000010EC  7200                     153          move.l      #$00000000, d1
000010EE  4E4F                     154          trap        #15
000010F0                           155          
000010F0                           156          
000010F0                           157  *----------------------------------------------------------------------*
000010F0                           158  *----------------------------------------------------------------------*        
000010F0                           159  *-----Draw a filled black box in the upper 50 pixels of the screen-----*
000010F0                           160  *----------------------------------------------------------------------*
000010F0                           161  *----------------------------------------------------------------------*
000010F0  323C 0000                162          move.w      #0, d1
000010F4  343C 0000                163          move.w      #0, d2
000010F8  363C 02BC                164          move.w      #700, d3
000010FC  383C 0032                165          move.w      #50, d4
00001100  7057                     166          move.l      #87, d0
00001102  4E4F                     167          trap        #15
00001104                           168          
00001104                           169          
00001104                           170  *----------------------------------------------------------------------*
00001104                           171  *----------------------------------------------------------------------*        
00001104                           172  *------------------------Draw health bar images------------------------*
00001104                           173  *----------------------------------------------------------------------*
00001104                           174  *----------------------------------------------------------------------*
00001104                           175  
00001104  4EB9 000011C0            176          jsr     DrawRunnerHealth
0000110A                           177     
0000110A                           178  *----------------------------------------------------------------------*
0000110A                           179  *----------------------------------------------------------------------*
0000110A                           180  *-Draw 7 segment health digits with the health of each player displayed*
0000110A                           181  *----------------------------------------------------------------------*
0000110A                           182  *----------------------------------------------------------------------*
0000110A                           183  
0000110A  4EB9 0029BE60            184          jsr     updateHealth
00001110                           185       
00001110                           186  *------------------------------------------------------*
00001110                           187  *-------User presses SPACEKEY command to start---------*
00001110                           188  *------------------------------------------------------*
00001110                           189  MainTitleLoop
00001110  103C 0013                190          move.b          #GET_KEY_INPUT_COMMAND,d0
00001114  7220                     191          move.l          #SPACE_KEY,d1
00001116  4E4F                     192          TRAP            #15
00001118  0C81 00000000            193          cmpi.l          #0, d1
0000111E  67F0                     194          BEQ             MainTitleLoop
00001120                           195  
00001120                           196  *-----------------------------------------------------------------------------------------------------*        
00001120                           197  *-----------------------------------------------------------------------------------------------------*
00001120                           198  *-----After buffering of the loading screen it loads the title image and uses DRAWIMAGE to draw it----*
00001120                           199  *-----------------------------------------------------------------------------------------------------*
00001120                           200  *-----------------------------------------------------------------------------------------------------*
00001120                           201  
00001120                           202  
00001120                           203          *place double buffer on the view of the screen
00001120  103C 005E                204          move.b  #94, d0
00001124  4E4F                     205          trap    #15
00001126                           206          
00001126                           207  *-----------------------------------------------------------------------------------------------------* 
00001126                           208  *-----------------------------------------------------------------------------------------------------*
00001126                           209  *-----------------------------Game loop to update entities--------------------------------------------*
00001126                           210  *-----------------------------------------------------------------------------------------------------* 
00001126                           211  *-----------------------------------------------------------------------------------------------------* 
00001126                           212           
00001126                           213  GameLoop:
00001126                           214  
00001126  4EB9 000011DE            215      jsr     updatePlayersBackgrounds
0000112C  4EB9 0029BE18            216      jsr     initPlayerInput
00001132  4EB9 00001186            217      jsr     updateProjectilesBackgrounds
00001138  4EB9 0000123E            218      jsr     drawPlayers
0000113E                           219      
0000113E                           220      
0000113E                           221  *---------------------------------------------------------* 
0000113E                           222  *---------------------------------------------------------*
0000113E                           223  *----Double buffering on the screen after the game loop---*   
0000113E                           224  *---------------------------------------------------------*
0000113E                           225  *---------------------------------------------------------*
0000113E                           226      
0000113E  103C 005C                227      move.b  #92, d0               ;Moves the value 92 to D0
00001142  4E4F                     228      trap    #15                   ;enables the buffering after the loading screen
00001144                           229          
00001144                           230  *------------------------------------------------------------------------------*
00001144                           231  *------------------------------------------------------------------------------*          
00001144                           232  *-Check both players health to see if they are at 0.  If they are, end the game*
00001144                           233  *------------------------------------------------------------------------------* 
00001144                           234  *------------------------------------------------------------------------------* 
00001144  6D00 0002                235      BLT     GAMEOVER
00001148                           236      
00001148                           237  *------------------------------------------------------------------------------*
00001148                           238  *------------------------------------------------------------------------------*        
00001148                           239  *--------Player 2's health reached 0  so create player 2 win screen------------*
00001148                           240  *------------------------------------------------------------------------------*
00001148                           241  *------------------------------------------------------------------------------* 
00001148                           242  
00001148                           243  *-------------Draw over players and projectiles---------*
00001148                           244  GAMEOVER
00001148  4EB9 000011DE            245      jsr     updatePlayersBackgrounds
0000114E                           246  
0000114E                           247      
0000114E                           248  **-----------------Draw GAMEOVER banner-----------------*
0000114E  41F8 1148                249      lea     GAMEOVER, a0
00001152  223C 000002BC            250      move.l  #700, d1
00001158  7464                     251      move.l  #100, d2
0000115A  7600                     252      move.l  #0, d3
0000115C  283C 0000012C            253      move.l  #300, d4
00001162  7A00                     254      move.l  #0, d5
00001164  7C00                     255      move.l  #0, d6
00001166  4EB9 0029BDA0            256      jsr     DRAWIMAGE
0000116C                           257          
0000116C                           258  
0000116C                           259  *------------Get image on double buffer-----------------*
0000116C  103C 005E                260      move.b  #94, d0
00001170  4E4F                     261      trap    #15
00001172                           262      
00001172                           263  
00001172                           264  *----------Stay on screen until user presses space key----*
00001172                           265  GAMEOVERLOOP
00001172  103C 0013                266      move.b          #GET_KEY_INPUT_COMMAND,d0
00001176  7220                     267      move.l          #$20,d1
00001178  4E4F                     268      TRAP            #15
0000117A  0C81 00000000            269      cmpi.l          #0, d1
00001180  6600 FEBA                270      BNE             ResetBattleVariables
00001184  60EC                     271      BRA             GAMEOVERLOOP
00001186                           272     
00001186                           273     
00001186                           274  *draw over projectile backgrounds and then draw the projectile in it's new position on screen
00001186                           275  updateProjectilesBackgrounds
00001186                           276  
00001186                           277  
00001186                           278      
00001186                           279      
00001186                           280     
00001186                           281  *--------------------------------------------------*
00001186                           282  *--------------------------------------------------*
00001186                           283  *----Loads in the runner into the sub routine------*
00001186                           284  *--------------------------------------------------*
00001186                           285  *--------------------------------------------------*
00001186                           286                 
00001186                           287  Drawrunner
00001186                           288  
00001186                           289              
00001186  41F9 0027C6D2            290      lea     Runner, a0
0000118C  2239 00001270            291      move.l  RunnerWidth, d1
00001192  2439 00001274            292      move.l  RunnerHeight, d2
00001198  2639 00001278            293      move.l  RunnerX, d3
0000119E  2839 0000127C            294      move.l  RunnerY, d4
000011A4  E84C                     295      lsr     #FRAC_BITS, d4
000011A6  2A39 00001278            296      move.l  RunnerX, d5
000011AC  2C39 0000127C            297      move.l  RunnerY, d6
000011B2  4EB9 0029BDA0            298      jsr     DRAWIMAGE
000011B8                           299      
000011B8  103C 005E                300      move.b  #94, d0
000011BC  4E4F                     301      trap    #15
000011BE                           302      
000011BE  4E75                     303      rts
000011C0                           304  
000011C0                           305     
000011C0                           306  *Draw the health bars of both players
000011C0                           307  DrawRunnerHealth
000011C0  41F9 00292008            308      lea     RunnerHealthImage, a0
000011C6  223C 000000C8            309      move.l  #200, d1
000011CC  7432                     310      move.l  #50, d2
000011CE  7600                     311      move.l  #0, d3
000011D0  7800                     312      move.l  #0, d4
000011D2  7A00                     313      move.l  #0, d5
000011D4  7C00                     314      move.l  #0, d6
000011D6  4EB9 0029BDA0            315      jsr     DRAWIMAGE
000011DC  4E75                     316      rts
000011DE                           317  *--------------------------------------------------*
000011DE                           318  *--------------------------------------------------*
000011DE                           319  *-------Draws the background for the runner--------*
000011DE                           320  *--------------------------------------------------*
000011DE                           321  *--------------------------------------------------*
000011DE                           322  
000011DE                           323  updatePlayersBackgrounds
000011DE                           324  
000011DE  2439 00001274            325      move.l  RunnerHeight, d2
000011E4  2639 00001278            326      move.l  RunnerX, d3
000011EA  2839 0000127C            327      move.l  RunnerY, d4
000011F0  E84C                     328      lsr     #FRAC_BITS, d4
000011F2  2A39 00001278            329      move.l  RunnerX, d5
000011F8  2C39 0000127C            330      move.l  RunnerY, d6
000011FE  E84E                     331      lsr     #FRAC_BITS, d6
00001200  4EB9 0029BDA0            332      jsr     DRAWIMAGE
00001206  4E75                     333      rts
00001208                           334  
00001208                           335     
00001208                           336  *---------Draw over both score backgrounds---------*
00001208                           337  updateScoreBackGround
00001208  7050                     338      move.l      #80, d0
0000120A  7200                     339      move.l      #$00000000, d1
0000120C  4E4F                     340      trap        #15
0000120E                           341      
0000120E  7051                     342      move.l      #81, d0
00001210  7200                     343      move.l      #$00000000, d1
00001212  4E4F                     344      trap        #15
00001214                           345  
00001214  323C 00CD                346      move.w      #205, d1
00001218  343C 0005                347      move.w      #5, d2
0000121C  363C 00EB                348      move.w      #235, d3
00001220  383C 0032                349      move.w      #50, d4
00001224  7057                     350      move.l      #87, d0
00001226  4E4F                     351      trap        #15
00001228                           352      
00001228  323C 01CC                353      move.w      #460, d1
0000122C  343C 0005                354      move.w      #5, d2
00001230  363C 01EF                355      move.w      #495, d3
00001234  383C 0032                356      move.w      #50, d4
00001238  7057                     357      move.l      #87, d0
0000123A  4E4F                     358      trap        #15
0000123C                           359      
0000123C  4E75                     360      rts
0000123E                           361  
0000123E                           362  
0000123E                           363  *draw both players
0000123E                           364  drawPlayers 
0000123E                           365        
0000123E  41F9 0027C6D2            366      lea     Runner, a0
00001244  2239 00001270            367      move.l  RunnerWidth, d1
0000124A  2439 00001274            368      move.l  RunnerHeight, d2
00001250  2639 00001278            369      move.l  RunnerX, d3
00001256  2839 0000127C            370      move.l  RunnerY, d4
0000125C  E84C                     371      lsr     #FRAC_BITS, d4
0000125E  2A39 00001280            372      move.l  RunnerChunkX, d5
00001264  2C39 00001284            373      move.l  RunnerChunkY, d6
0000126A  4EB9 0029BDA0            374      jsr     DRAWIMAGE
00001270                           375  
00001270                           376  *--------------------------------------------------*
00001270                           377  *--------------------------------------------------*
00001270                           378  *-------Variables for the runner are declared------*
00001270                           379  *--------------------------------------------------*
00001270                           380  *--------------------------------------------------*
00001270                           381  
00001270                           382  RunnerWidth
00001270= 00000020                 383      dc.l   32
00001274                           384  RunnerHeight
00001274= 00000029                 385      dc.l   41 
00001278                           386  RunnerX
00001278= 0000000A                 387      dc.l    10
0000127C                           388  RunnerY
0000127C= 00000226                 389      dc.l    550
00001280                           390  RunnerChunkX
00001280= 000000A0                 391      dc.l    160
00001284                           392  RunnerChunkY
00001284= 00000000                 393      dc.l    0
00001288                           394  RunnerSpeed
00001288= 0000000A                 395      dc.l    10
0000128C                           396  RunnerJumping
0000128C= 00000000                 397      dc.l    0
00001290                           398  Runner1Health
00001290= 00000008                 399      dc.l    8
00001294                           400  RunnerLeft
00001294= 00000000                 401      dc.l    0
00001298                           402  RunnerIdlSprite
00001298= 000000A0                 403      dc.l    160
0000129C                           404  RunnerJumpSprite
0000129C= 00000100                 405      dc.l    256  
000012A0                           406  RunnerDamageSprite
000012A0= 00000120                 407      dc.l    288 
000012A4                           408  Ground
000012A4= 00000226                 409      dc.l    550
000012A8                           410  RunnerVelocity
000012A8= 00000000                 411      dc.l    0
000012AC                           412  ProjectileSpeed
000012AC= 00000014                 413      dc.l    20
000012B0                           414  RunnerScoreX
000012B0= 000000C8                 415      dc.l    200
000012B4                           416  
000012B4                           417  *-----------------------------------------------------------------------*
000012B4                           418  *-------Sounds that are used in the same directory are declared here----*
000012B4                           419  *-----------------------------------------------------------------------*
000012B4                           420  
000012B4                           421  
000012B4                           422  
000012B4                           423  *--------------------------------------------------------------------------------------------------------------------------------------------*    
000012B4                           424  *-------Variables in the drawimages.x68 are Declared here then use the images in the same file location to load the images in bmp form-------*
000012B4                           425  *--------------------------------------------------------------------------------------------------------------------------------------------*  
000012B4                           426  LoadingScreen
000012B4                           427        INCBIN  "loadinggame.bmp"
000151FE                           428  TitleScreen
000151FE                           429        INCBIN  "Titlesmall.bmp"
00148C68                           430  Frame1
00148C68                           431        INCBIN  "frame1.bmp"
0027C6D2                           432  Runner
0027C6D2                           433        INCBIN  "runner2.bmp"
00292008                           434  RunnerHealthImage
00292008                           435        INCBIN  "RunnerHealth_200x50.bmp"
0029BCD2                           436  
0029BCD2                           437   
0029BCD2                           438  *--------------------------------------------------------------------------------------------------------------------*      
0029BCD2                           439  *--------Includes the file in the same directory with the varibles above so that the code is affected in the main-----*
0029BCD2                           440  *---------------------------------------------------------------------------------------------------------------------*                      
0029BCD2                           441   include "drawimages.x68"
0029BCD2                           442  
0029BCD2  =00000050                443  PenColorCode      EQU     80
0029BCD2  =00000052                444  DrawPixelCode     EQU     82
0029BCD2  =00000021                445  ScreenChangeCode  EQU     33
0029BCD2                           446  
0029BCD2                           447  DrawChunk
0029BCD2                           448  
0029BCD2                           449  
0029BCD2  206F 0004                450          move.l  4(sp), a0               ;store the pointer to the image data into an address for access
0029BCD6  2028 000A                451          move.l  10(a0), d0              ;grab the offset from header to pixels
0029BCDA  E158                     452          rol.w   #8, d0                  ;rotate the word by 8 to move offset to appropriate position          
0029BCDC  4840                     453          swap    d0                      ;now swap the words of the offset for the next rotate
0029BCDE  E158                     454          rol.w   #8, d0                  ;finally rotate the words one time to make the true offset value readable
0029BCE0  D0C0                     455          add.w   d0, a0                  ;change position in memory to pixel data
0029BCE2                           456          
0029BCE2                           457          *Calculate beginning position of chunk to draw from Y position
0029BCE2  4284                     458          clr.l   d4
0029BCE4  282F 0024                459          move.l  36(sp),d4
0029BCE8  2A2F 0014                460          move.l  20(sp), d5
0029BCEC  DAAF 000C                461          add.l   12(sp), d5
0029BCF0  9885                     462          sub.l   d5, d4
0029BCF2  4285                     463          clr.l   d5
0029BCF4  3A04                     464          move.w  d4, d5
0029BCF6  4284                     465          clr.l   d4
0029BCF8                           466          
0029BCF8  282F 0020                467          move.l  32(sp), d4
0029BCFC                           468          
0029BCFC  CAC4                     469          mulu.w  d4, d5
0029BCFE                           470          *set position in address at the beginning of chunk draw
0029BCFE  D1C5                     471          add.l   d5, a0
0029BD00  D1C5                     472          add.l   d5, a0 
0029BD02  D1C5                     473          add.l   d5, a0    
0029BD04                           474           
0029BD04                           475           
0029BD04                           476           
0029BD04                           477                 
0029BD04  262F 000C                478          move.l  12(sp), d3
0029BD08                           479          
0029BD08                           480  OUTERLOOP
0029BD08  3C3C 0000                481          move.w  #0, d6                  ;set or reset x counter for for loop
0029BD0C  282F 0010                482          move.l  16(sp), d4
0029BD10  C8FC 0003                483          mulu.w  #3, d4
0029BD14  D0C4                     484          add.w   d4, a0                  ;add start of x to 0
0029BD16                           485          
0029BD16                           486  INNERLOOP
0029BD16  4284                     487          clr.l   d4                      ;make sure d4 has nothing in it
0029BD18  1818                     488          move.b  (a0)+,d4                ;grab the first pixel
0029BD1A  4844                     489          swap.w  d4                      ;swap the pixel to change its position in memory for the rest of the pixel data
0029BD1C  4285                     490          clr.l   d5                      ;make sure d5 is also clear
0029BD1E  2A04                     491          move.l  d4, d5                  ;store previously found pixel data in d5 for next value
0029BD20  4284                     492          clr.l   d4                      ;clear d4 for the next bit of memory
0029BD22  1818                     493          move.b  (a0)+, d4               ;grab next memory bit
0029BD24  E14C                     494          lsl     #8, d4                  ;shift left to get pixel in top of second word to combine with previous pixel bit
0029BD26  DA84                     495          add.l   d4, d5                  ;combine the data
0029BD28  4284                     496          clr.l   d4                      ;clear d4 once again
0029BD2A  1818                     497          move.b  (a0)+, d4               ;get last bit needed
0029BD2C  DA84                     498          add.l   d4, d5                  ;combine it to the end of the previous two bits to get the pixel value
0029BD2E                           499          
0029BD2E                           500          
0029BD2E  4284                     501          clr.l   d4                      ;If pixel is pink, do not draw it
0029BD30  1838 00FF                502          move.b  $FF, d4
0029BD34  4844                     503          swap    d4
0029BD36  1838 00FF                504          move.b  $FF, d4
0029BD3A                           505          
0029BD3A  BA44                     506          cmp     d4, d5
0029BD3C  6700 0006                507          BEQ     INCREMENT
0029BD40                           508          
0029BD40  6000 0044                509          BRA     DRAWPIXEL               ;pixel meets criteria and can be printed
0029BD44                           510          
0029BD44                           511  INCREMENT
0029BD44  4284                     512          clr.l   d4                      ;make sure d4 is empty for use  
0029BD46  5246                     513          add.w   #1,d6                   ;increment x counter by one
0029BD48                           514          
0029BD48                           515          *Check for end of X row
0029BD48  282F 0010                516          move.l  16(sp), d4
0029BD4C  D886                     517          add.l   d6, d4
0029BD4E  2A2F 0020                518          move.l  32(sp), d5
0029BD52  B845                     519          cmp     d5, d4
0029BD54  6700 0022                520          BEQ     INCREMENTY
0029BD58                           521        
0029BD58  282F 0008                522          move.l  8(sp), d4               ;move width of image into register
0029BD5C  BC44                     523          cmp     d4, d6                  ;see if counter is beyond x bounds
0029BD5E  66B6                     524          BNE     INNERLOOP               ;if it is not, loop again
0029BD60                           525          
0029BD60                           526          ;skip after outside of box on x axis
0029BD60  4284                     527          clr.l   d4
0029BD62  282F 0010                528          move.l  16(sp), d4
0029BD66  D8AF 0008                529          add.l   8(sp), d4
0029BD6A  4285                     530          clr.l   d5
0029BD6C  2A2F 0020                531          move.l  32(sp), d5
0029BD70  9A84                     532          sub.l   d4, d5
0029BD72  CAFC 0003                533          mulu.w  #3, d5
0029BD76                           534          ;add offset to address
0029BD76  D1C5                     535          add.l   d5, a0
0029BD78                           536  
0029BD78                           537  INCREMENTY        
0029BD78                           538          ;take care of padding
0029BD78  D1F9 0029BE14            539          add.l   Padding, a0             ;add padding.  If there is none, the address won't skip anything
0029BD7E                           540          
0029BD7E  5343                     541          sub.w   #1, d3                  ;decrement y counter to see if you are out of the y iteration
0029BD80  6686                     542          BNE     OUTERLOOP               ;if it is not, loop back to outer loop
0029BD82  6000 001A                543          BRA     ENDROUTINE              ;branch to end of subroutine, whole image has been iterated
0029BD86                           544          
0029BD86                           545  DRAWPIXEL
0029BD86  2205                     546          move.l  d5, d1                  ;move pixel data into d1 for pen color
0029BD88  7050                     547          move.l  #PenColorCode, d0       ;set trap code for setting the pen color
0029BD8A  4E4F                     548          trap    #15                     ;set pen color
0029BD8C                           549                           
0029BD8C  222F 0018                550          move.l   24(sp), d1             ;store the starting x position of the chunk
0029BD90  D286                     551          add.l    d6, d1                 ;add iteration position of x to start of chunk
0029BD92                           552          
0029BD92  242F 001C                553          move.l  28(sp), d2              ;start at top of chunk to flip image
0029BD96  D483                     554          add.l   d3, d2                  ;subtract current y position
0029BD98  7052                     555          move.l  #DrawPixelCode, d0      ;Set trap code to draw pixel at position
0029BD9A  4E4F                     556          trap    #15                     ;draw pixel at position
0029BD9C                           557          
0029BD9C  60A6                     558          BRA     INCREMENT               ;increment position
0029BD9E                           559          
0029BD9E                           560  ENDROUTINE
0029BD9E  4E75                     561          rts                             ;branch back to end of program
0029BDA0                           562  
0029BDA0                           563  DRAWIMAGE
0029BDA0                           564          *Reset padding for multiple calls
0029BDA0  23FC 00000000 0029BE14   565          move.l  #0, Padding
0029BDAA                           566          
0029BDAA  7024                     567          move.l  #36, d0                 ;number of 7 4 byte arguments to prepare stack to receive
0029BDAC  9FC0                     568          sub.l   d0, sp                  ;prepare stack to receive arguments 
0029BDAE                           569          
0029BDAE  2E88                     570          move.l  a0, (sp)                ;load pointer to the .bmp file onto the stack
0029BDB0                           571          
0029BDB0                           572          ;store width of chunk on the stack
0029BDB0  2F41 0004                573          move.l  d1, 4(sp)
0029BDB4                           574          ;store height of the chunk on the stack 
0029BDB4  2F42 0008                575          move.l  d2, 8(sp)               
0029BDB8                           576          
0029BDB8                           577          ;add start of chunk to move with image
0029BDB8  2F45 000C                578          move.l   d5, 12(sp)             ;store Top left x of draw chunk on stack
0029BDBC                           579          
0029BDBC                           580          ;subtract y position from height to get start y
0029BDBC  2F46 0010                581          move.l  d6, 16(sp)              ;store Top left y of draw chunk on stack                      
0029BDC0                           582  
0029BDC0  2F43 0014                583          move.l  d3, 20(sp)              ;store Beginning print location for x axis on stack
0029BDC4  2F44 0018                584          move.l  d4, 24(sp)              ;store Beginning print location for y axis on stack
0029BDC8                           585          
0029BDC8  2228 0012                586          move.l  18(a0), d1              ;get width of image from .bmp file
0029BDCC  E159                     587          rol.w   #8, d1          
0029BDCE  4841                     588          swap    d1
0029BDD0  E159                     589          rol.w   #8, d1                  ;rotate and swap long word to get true width value to use later
0029BDD2  2F41 001C                590          move.l  d1, 28(sp)              ;store width of image to make variable not global
0029BDD6                           591  
0029BDD6                           592          
0029BDD6                           593          ;calculate for padding.  
0029BDD6                           594          ;This only concerns width
0029BDD6  7404                     595          move.l  #4, d2                  ;move 4 into register for padding calculation
0029BDD8  C2FC 0003                596          mulu.w  #3, d1                  ;multiply image width by 3 for formula
0029BDDC  82FC 0004                597          divu.w  #4, d1                  ;divide by four to find remainder
0029BDE0  4841                     598          swap    d1                      ;swap remainder into lower word
0029BDE2  4284                     599          clr.l   d4                      ;make sure d4 is empty
0029BDE4  383C 0000                600          move.w  #0, d4                  ;move 0 into d4 
0029BDE8  B841                     601          cmp.w   d1, d4                  ;if equal, there is no padding
0029BDEA  6700 000A                602          BEQ     RUNPROGRAM              ;continue in program for special case of being divisible by 4
0029BDEE                           603          
0029BDEE                           604  ACCOUNTFORPADDING
0029BDEE  9441                     605          sub.w   d1, d2                  ;subtract remainder from 4 to get padding
0029BDF0  23C2 0029BE14            606          move.l  d2, Padding             ;store padding for later use
0029BDF6                           607          
0029BDF6                           608          
0029BDF6                           609  RUNPROGRAM       
0029BDF6  2428 0016                610          move.l  22(a0), d2              ;get height of image from .bmp file
0029BDFA  E15A                     611          rol.w   #8, d2          
0029BDFC  4842                     612          swap    d2
0029BDFE  E15A                     613          rol.w   #8, d2                  ;rotate and swap long word to get true height value to use later
0029BE00  2F42 0020                614          move.l  d2, 32(sp)              ;store height of image to make variable not global
0029BE04                           615  
0029BE04  4EB9 0029BCD2            616          jsr     DrawChunk               ;call subroutine to draw chunk of image       
0029BE0A                           617         
0029BE0A  4280                     618          clr.l   d0
0029BE0C  7024                     619          move.l  #36, d0                
0029BE0E  DFC0                     620          add.l   d0, sp                  ;fix stack
0029BE10                           621          
0029BE10  4287                     622          clr.l   d7
0029BE12                           623          
0029BE12  4E75                     624          rts
0029BE14                           625  
0029BE14                           626  Padding
0029BE14= 00000000                 627          dc.l    0
0029BE18                           628  
0029BE18                           629  
0029BE18                           630  
0029BE18                           631  -------------------- end include --------------------
0029BE18                           632   include "playerInput.x68"
0029BE18                           633  
0029BE18                           634  
0029BE18                           635  ALL_REG                 REG     D0-D7/A0-A6
0029BE18  =00000013                636  GET_KEY_INPUT_COMMAND   equ     19        
0029BE18                           637  
0029BE18                           638  initPlayerInput
0029BE18                           639          *ASCII CODE 25 = 0
0029BE18  7420                     640          move.l          #$20,d2
0029BE1A                           641  inputLoop
0029BE1A  4280                     642          clr.l           d0   
0029BE1C  103C 0013                643          move.b          #GET_KEY_INPUT_COMMAND,d0
0029BE20  2202                     644          move.l          d2,d1
0029BE22  4E4F                     645          TRAP            #15
0029BE24  0C01 0000                646          cmpi.b          #0,d1
0029BE28  6700 0008                647          beq             noCall
0029BE2C  4EB9 0029BE3C            648          jsr             callFunction
0029BE32                           649  noCall
0029BE32  5282                     650          add.l           #1,d2          
0029BE34  0C02 005A                651          cmpi.b          #$5A,d2
0029BE38  66E0                     652          bne             inputLoop
0029BE3A                           653       
0029BE3A                           654  
0029BE3A                           655          *end of input, return
0029BE3A  4E75                     656          rts
0029BE3C                           657  
0029BE3C                           658  callFunction
0029BE3C  48E7 FFFE                659          movem.l ALL_REG,-(sp)
0029BE40                           660  
0029BE40  0482 00000020            661          sub.l   #$20,d2
0029BE46  E58A                     662          lsl.l   #2,d2
0029BE48  2230 2000                663          move.l  (a0,d2),d1
0029BE4C  0C81 00000000            664          cmpi.l  #0,d1
0029BE52  6700 0006                665          beq     noFuncPtr
0029BE56  2241                     666          move.l  d1,a1
0029BE58  4E91                     667          jsr     (a1)  
0029BE5A                           668  noFuncPtr
0029BE5A  4CDF 7FFF                669          movem.l (sp)+,ALL_REG
0029BE5E  4E75                     670          rts
0029BE60                           671  
0029BE60                           672  
0029BE60                           673  
0029BE60                           674  
0029BE60                           675  
0029BE60                           676          
0029BE60                           677  
0029BE60                           678  
0029BE60                           679  
0029BE60                           680  
0029BE60                           681  
0029BE60                           682  
0029BE60                           683  
0029BE60                           684  
0029BE60                           685  
0029BE60                           686  
0029BE60                           687  
0029BE60                           688  
0029BE60                           689  
0029BE60                           690  
0029BE60                           691  
0029BE60                           692  
0029BE60                           693  
0029BE60                           694  
0029BE60                           695  
0029BE60                           696  
0029BE60                           697  
0029BE60                           698  
0029BE60                           699  
0029BE60                           700  
0029BE60                           701  
0029BE60                           702  
0029BE60                           703  
0029BE60                           704  
0029BE60                           705  -------------------- end include --------------------
0029BE60                           706   include "RunnersHealthBar.x68"
0029BE60                           707    *update health based on current health
0029BE60                           708  updateHealth
0029BE60                           709      *get the position of the current health based on the player health passed in
0029BE60  207C 0029BFA2            710      move.l      #zeroDigit, a0
0029BE66                           711      *multiply digit by 4 to get correct hex number at the end of the file
0029BE66  E588                     712      lsl.l       #2, d0
0029BE68  D1C0                     713      add.l       d0, a0    
0029BE6A                           714      *store the current hex value of health
0029BE6A  2C10                     715      move.l      (a0), d6
0029BE6C                           716      
0029BE6C                           717      *Change pen to white for each segment
0029BE6C  7050                     718      move.l      #80, d0
0029BE6E  223C 00FFFFFF            719      move.l      #$00FFFFFF, d1
0029BE74  4E4F                     720      trap        #15
0029BE76                           721      
0029BE76  7051                     722      move.l      #81, d0
0029BE78  223C 00FFFFFF            723      move.l      #$00FFFFFF, d1
0029BE7E  4E4F                     724      trap        #15
0029BE80                           725  
0029BE80                           726  GDigitRoutine
0029BE80  2206                     727      move.l      d6, d1     
0029BE82  C2BC 00000001            728      AND.l       #1, d1
0029BE88  6700 001C                729      BEQ         FDigitRoutine
0029BE8C  323C 0005                730      move.w      #5, d1
0029BE90  D285                     731      add.l       d5, d1
0029BE92  343C 0014                732      move.w      #20, d2
0029BE96  363C 0023                733      move.w      #35, d3
0029BE9A  D685                     734      add.l       d5, d3
0029BE9C  383C 001E                735      move.w      #30, d4
0029BEA0  4EB9 0029BF9A            736      jsr         DrawDigitPosition
0029BEA6                           737  FDigitRoutine
0029BEA6  E88E                     738      lsr.l         #4, d6
0029BEA8  2206                     739      move.l      d6, d1
0029BEAA  C2BC 00000001            740      AND.l       #1, d1
0029BEB0  6700 001C                741      BEQ         EDigitRoutine
0029BEB4  323C 0005                742      move.w      #5, d1
0029BEB8  D285                     743      add.l       d5, d1
0029BEBA  343C 0005                744      move.w      #5, d2
0029BEBE  363C 000F                745      move.w      #15, d3
0029BEC2  D685                     746      add.l       d5, d3
0029BEC4  383C 0019                747      move.w      #25, d4
0029BEC8  4EB9 0029BF9A            748      jsr         DrawDigitPosition
0029BECE                           749  EDigitRoutine
0029BECE  E88E                     750      lsr.l         #4, d6
0029BED0  2206                     751      move.l      d6, d1
0029BED2  C2BC 00000001            752      AND.l       #1, d1
0029BED8  6700 001C                753      BEQ         DDigitRoutine
0029BEDC  323C 0005                754      move.w      #5, d1
0029BEE0  D285                     755      add.l       d5, d1
0029BEE2  343C 0019                756      move.w      #25, d2
0029BEE6  363C 000F                757      move.w      #15, d3
0029BEEA  D685                     758      add.l       d5, d3
0029BEEC  383C 002D                759      move.w      #45, d4
0029BEF0  4EB9 0029BF9A            760      jsr         DrawDigitPosition
0029BEF6                           761  DDigitRoutine
0029BEF6  E88E                     762      lsr.l         #4, d6
0029BEF8  2206                     763      move.l      d6, d1
0029BEFA  C2BC 00000001            764      AND.l       #1, d1
0029BF00  6700 001C                765      BEQ         CDigitRoutine
0029BF04  323C 0005                766      move.w      #5, d1
0029BF08  D285                     767      add.l       d5, d1
0029BF0A  343C 0023                768      move.w      #35, d2
0029BF0E  363C 0023                769      move.w      #35, d3
0029BF12  D685                     770      add.l       d5, d3
0029BF14  383C 002D                771      move.w      #45, d4
0029BF18  4EB9 0029BF9A            772      jsr         DrawDigitPosition
0029BF1E                           773  CDigitRoutine
0029BF1E  E88E                     774      lsr.l         #4, d6
0029BF20  2206                     775      move.l      d6, d1
0029BF22  C2BC 00000001            776      AND.l       #1, d1
0029BF28  6700 001C                777      BEQ         BDigitRoutine
0029BF2C  323C 0019                778      move.w      #25, d1
0029BF30  D285                     779      add.l       d5, d1
0029BF32  343C 0019                780      move.w      #25, d2
0029BF36  363C 0023                781      move.w      #35, d3
0029BF3A  D685                     782      add.l       d5, d3
0029BF3C  383C 002D                783      move.w      #45, d4
0029BF40  4EB9 0029BF9A            784      jsr         DrawDigitPosition
0029BF46                           785  BDigitRoutine
0029BF46  E88E                     786      lsr.l         #4, d6
0029BF48  2206                     787      move.l      d6, d1
0029BF4A  C2BC 00000001            788      AND.l       #1, d1
0029BF50  6700 001C                789      BEQ         ADigitRoutine
0029BF54  323C 0019                790      move.w      #25, d1
0029BF58  D285                     791      add.l       d5, d1
0029BF5A  343C 0005                792      move.w      #5, d2
0029BF5E  363C 0023                793      move.w      #35, d3
0029BF62  D685                     794      add.l       d5, d3
0029BF64  383C 0019                795      move.w      #25, d4
0029BF68  4EB9 0029BF9A            796      jsr         DrawDigitPosition
0029BF6E                           797  ADigitRoutine
0029BF6E  E88E                     798      lsr.l         #4, d6
0029BF70  2206                     799      move.l      d6, d1
0029BF72  C2BC 00000001            800      AND.l       #1, d1
0029BF78  6700 0026                801      BEQ         FinishHealth
0029BF7C  323C 0005                802      move.w      #5, d1
0029BF80  D285                     803      add.l       d5, d1
0029BF82  343C 0005                804      move.w      #5, d2
0029BF86  363C 0023                805      move.w      #35, d3
0029BF8A  D685                     806      add.l       d5, d3
0029BF8C  383C 000F                807      move.w      #15, d4
0029BF90  4EB9 0029BF9A            808      jsr         DrawDigitPosition
0029BF96                           809      
0029BF96  6000 0008                810      BRA         FinishHealth
0029BF9A                           811  DrawDigitPosition
0029BF9A  7057                     812      move.l      #87, d0
0029BF9C  4E4F                     813      trap        #15
0029BF9E  4E75                     814      rts
0029BFA0                           815  
0029BFA0                           816  FinishHealth
0029BFA0  4E75                     817      rts
0029BFA2                           818  
0029BFA2                           819  zeroDigit   
0029BFA2= 01111110                 820      dc.l    $01111110
0029BFA6                           821  oneDigit    
0029BFA6= 00110000                 822      dc.l    $00110000
0029BFAA                           823  twoDigit    
0029BFAA= 01101101                 824      dc.l    $01101101
0029BFAE                           825  threeDigit  
0029BFAE= 01111001                 826      dc.l    $01111001
0029BFB2                           827  fourDigit   
0029BFB2= 00110011                 828      dc.l    $00110011
0029BFB6                           829  fiveDigit       
0029BFB6= 01011011                 830      dc.l    $01011011
0029BFBA                           831  sixDigit    
0029BFBA= 01011111                 832      dc.l    $01011111
0029BFBE                           833  sevenDigit  
0029BFBE= 01110000                 834      dc.l    $01110000
0029BFC2                           835  eightDigit  
0029BFC2= 01111111                 836      dc.l    $01111111
0029BFC6                           837  nineDigit   
0029BFC6= 01111011                 838      dc.l    $01111011
0029BFCA                           839  
0029BFCA                           840  -------------------- end include --------------------
0029BFCA                           841  
0029BFCA                           842  
0029BFCA                           843  OUIT
0029BFCA                           844              END     START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACCOUNTFORPADDING   29BDEE
ADIGITROUTINE       29BF6E
ALL_REG             7FFF
BDIGITROUTINE       29BF46
CALLFUNCTION        29BE3C
CDIGITROUTINE       29BF1E
DDIGITROUTINE       29BEF6
DOWN_KEY            28
DRAWCHUNK           29BCD2
DRAWDIGITPOSITION   29BF9A
DRAWIMAGE           29BDA0
DRAWPIXEL           29BD86
DRAWPIXELCODE       52
DRAWPLAYERS         123E
DRAWRUNNER          1186
DRAWRUNNERHEALTH    11C0
EDIGITROUTINE       29BECE
EIGHTDIGIT          29BFC2
ENDROUTINE          29BD9E
FDIGITROUTINE       29BEA6
FINISHHEALTH        29BFA0
FIVEDIGIT           29BFB6
FOURDIGIT           29BFB2
FRAC_BITS           4
FRAME1              148C68
GAMELOOP            1126
GAMEOVER            1148
GAMEOVERLOOP        1172
GDIGITROUTINE       29BE80
GET_KEY_INPUT_COMMAND  13
GET_USER_INPUT_COMMAND  13
GRAVITY             9C
GROUND              12A4
INCREMENT           29BD44
INCREMENTY          29BD78
INITPLAYERINPUT     29BE18
INNERLOOP           29BD16
INPUTLOOP           29BE1A
LEFT_KEY            25
LOADINGSCREEN       12B4
MAINTITLELOOP       1110
NINEDIGIT           29BFC6
NOCALL              29BE32
NOFUNCPTR           29BE5A
ONEDIGIT            29BFA6
OUIT                29BFCA
OUTERLOOP           29BD08
PADDING             29BE14
PENCOLORCODE        50
PROJECTILESPEED     12AC
RESETBATTLEVARIABLES  103C
RIGHT_KEY           27
RUNNER              27C6D2
RUNNER1HEALTH       1290
RUNNERCHUNKX        1280
RUNNERCHUNKY        1284
RUNNERDAMAGESPRITE  12A0
RUNNERHEALTHIMAGE   292008
RUNNERHEIGHT        1274
RUNNERIDLSPRITE     1298
RUNNERJUMPING       128C
RUNNERJUMPSPRITE    129C
RUNNERLEFT          1294
RUNNERSCOREX        12B0
RUNNERSPEED         1288
RUNNERSPRITE        A0
RUNNERSTARTSPRITEX  A0
RUNNERVELOCITY      12A8
RUNNERWIDTH         1270
RUNNERX             1278
RUNNERY             127C
RUNPROGRAM          29BDF6
SCREENCHANGECODE    21
SEVENDIGIT          29BFBE
SIXDIGIT            29BFBA
SPACE_KEY           20
START               1000
THREEDIGIT          29BFAE
TITLESCREEN         151FE
TWODIGIT            29BFAA
UPDATEHEALTH        29BE60
UPDATEPLAYERSBACKGROUNDS  11DE
UPDATEPROJECTILESBACKGROUNDS  1186
UPDATESCOREBACKGROUND  1208
UP_KEY              26
ZERODIGIT           29BFA2
